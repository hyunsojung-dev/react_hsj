{"version":3,"sources":["logo.svg","loginComponents/AuthRoute.js","loginComponents/LoginForm.js","loginComponents/logoutForm.js","containers/First-Home.js","Dash.js","serviceWorker.js","index.js"],"names":["module","exports","AuthRoute","makeStyles","theme","root","margin","spacing","item","marginTop","container","display","flexWrap","textField","width","withRouter","logout","history","style","float","marginRight","fontSize","onClick","push","Problem_Info","props","problem","problem_info","Problem_Answer","problem_answer","btnStyle","color","background","padding","border","borderRadius","lineHeight","textAlign","Home","state","number","problems","showPopup","random","onChangeClick","bind","questionList","randNum","console","log","index","answer","this","setState","result_problem","result_answer","result_index","axios","get","then","response","data","catch","error","map","currentTodo","i","key","rand","Math","floor","onView_ProblemInfo","className","modal","trigger","onView_ProblemAnswer","Component","bluegrey_primary","blueGrey","Copyright","Typography","variant","align","Link","href","Date","getFullYear","useStyles","flexGrow","menuButton","title","list","fullList","AppBar","Box","marginBottom","Dashboard","side","classes","React","useState","user","setUser","authenticated","top","left","bottom","right","toggleDrawer","open","event","type","position","Toolbar","IconButton","edge","aria-label","component","noWrap","to","Drawer","onClose","role","onKeyDown","Divider","ListItem","button","ListItemIcon","ListItemText","primary","exact","path","Homeview","pt","Boolean","window","location","hostname","match","ReactDOM","render","Dash","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09afb6e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nfunction AuthRoute({ authenticated, component: Component, render, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        authenticated ? (\n          render ? render(props) : <Component {...props} />\n        ) : (\n          <Redirect\n            to={{ pathname: '/login', state: { from: props.location } }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default AuthRoute;","import React, { useState } from 'react';\nimport { Redirect, BrowserRouter as Router } from 'react-router-dom';\n// import { Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport Modal from 'react-awesome-modal';\nimport '../css/LoginForm.css';\n// import { Left } from 'react-bootstrap/lib/Media';\n//import Image from '../../img/iconlogin.png';\n// material-ui 사용 : styles, textField, button, alert\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      //width: 330,\n    },\n  },\n  item:{\n    marginTop: 5,\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: 15,\n  },\n  textField: {\n    // marginLeft: theme.spacing(1),\n    // marginRight: theme.spacing(1),\n    width: 230,\n  }\n}));\n\nfunction LoginForm({ authenticated, login, location }) {\n  // style\n  const classes = useStyles();\n\n  // 회원가입을 위한 DB setting\n  const [user_email, setEmail] = useState('');\n  const [user_name, setName] = useState('');\n  const [user_password, setPW] = useState('');\n  const [user_birthday, setBIRTH] = useState('');\n  const [visible, setVB] = useState('');\n  const [error, setERROR] = useState('');\n  // 로그인 form DB setting\n  const [login_email, setlogin_Email] = useState('');\n  const [login_password, setlogin_PW] = useState('');\n  //alert snckbar \n  const [open, setOpen] = React.useState(false);\n\n  const openModal = () => {\n      setVB(true);\n      // this.setState({  visible : true  });\n  }\n\n  const closeModal =() => {\n      setVB(false);\n      // this.setState({  visible : false  });\n    }\n\n  // server&DB 에서 유효성 검사 후 유효 혹은 에러 발생\n  const getUsers = (newUser) => {\n    try {\n      return axios.post('/login/user', newUser);\n    } catch (error) {\n      console.error(error)\n    }\n  };\n  const getoverlaps = (overlapEmail) => {\n    try {\n      return axios.post('/login/sign/overlap', overlapEmail);\n    } catch (error) {\n      console.error(error)\n    }\n  };\n\n  function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n\n  const onSubmit = () => {\n    try {\n      console.log(`로그인 입력 정보`);\n      console.log(`commnet text: ${login_email}`);\n      console.log(`commnet user: ${login_password}`);\n\n      const newLogin = {\n        login_email: login_email,\n        login_password: login_password\n      };\n      const usrs = getUsers(newLogin).then(res => {\n        if (res.data===login_email){\n          console.log(res.data);\n          login({ login_email, login_password });\n        }\n        else if (res.data==='false'){\n          //alert('로그인 실패, 다시 시도해주세요.');\n          setOpen(true);\n          console.log('=> err_location : react login form에서 로그인 실패.');\n          setlogin_Email('');\n          setlogin_PW('');\n        }\n      })\n      \n    } catch (e) {\n      alert('Failed to login');\n      setlogin_Email('');\n      setlogin_PW('');\n    }\n  }\n  const SignOnclick = () => {\n    try {\n      console.log(`회원가입 정보`);\n      console.log(`user_email: ${user_email}`);\n      console.log(`user_name: ${user_name}`);\n      console.log(`user_name: ${user_birthday}`);\n      console.log(`user_password: ${user_password}`);\n      \n      if (user_password.length > 6 ){\n        const newUser = {\n          user_email: user_email,\n          user_name: user_name,\n          user_birthday: user_birthday,\n          user_password: user_password\n        };\n        axios.post('/login/sign/add', newUser)\n            .then(res => console.log(res.data))\n            .catch(function (error) {\n              if (error){\n                console.log(error);\n                alert('중복 아이디가 있습니다.');\n                setERROR('err');\n              }\n              else if(error!=='err') {\n              }\n          })\n        //alert('회원가입 성공!');\n        setEmail('');\n        setPW('');\n        setName('');\n        setBIRTH('');\n        setVB(false);\n      }\n      else {\n        alert('비밀번호 6자리 이상 입력해주세요.');\n      }\n\n    } catch (e) {\n      alert('회원가입 실패, 다시 시도해주세요.');\n      // setEmail('');\n      setPW('');\n      setName('');\n      setBIRTH('');\n    }\n  } \n\n  const overlap = () => {\n    const overlapEmail = {\n      user_email: user_email\n    };\n    const overs = getoverlaps(overlapEmail).then(res => {\n      if (res.data==='false'){\n        alert('중복 아이디 존재');\n      }\n      else if(res.data===\"\"){\n        alert('아이디를 입력해주세요.');\n      }\n      else if (res.data==='true'){\n        alert('아이디 사용가능');\n      }\n    }) \n\n  }\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const { from } = location.state || { from: { pathname: \"/\" } };\n  if (authenticated) return <Redirect to={from} />;\n\n  return (\n    <><Router>\n    <div //style={{margin: 25}}\n    >      \n    <div>LOGIN</div>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n      {/* <form noValidate autoComplete=\"off\"> */}\n        <div className={classes.item}>\n        <TextField\n          required\n          id=\"filled-required\"\n          label=\"Email\"\n          defaultValue=\"Hello World\"\n          variant=\"filled\"\n          value={login_email} onChange={({ target: { value } }) => setlogin_Email(value)}\n        />\n        </div>\n        <div className={classes.item}>\n        <TextField\n          id=\"filled-password-input\"\n          label=\"Password\"\n          type=\"password\"\n          autoComplete=\"current-password\"\n          variant=\"filled\"\n          value={login_password} onChange={({ target: { value } }) => setlogin_PW(value)}\n        />\n        </div>\n        <div >\n        <Button variant=\"outlined\" onClick={onSubmit} >submit</Button>\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\" >가입되지 않은 아이디이거나, 잘못된 패스워드 입니다.</Alert>\n        </Snackbar>\n        {/* </div> */}\n        <section>\n              <Button variant=\"outlined\" onClick={openModal} > 회원가입 </Button>              \n                {/* <Modal visible={visible} width=\"400\" height=\"400\" effect=\"fadeInUp\"   onClickAway={closeModal}> */}\n                <Modal visible={visible} effect=\"fadeInUp\"   onClickAway={closeModal}>\n                    <div>\n                      <div>\n                        <div className=\"register-header\">회원가입</div>   \n                        {/* <div style={{ marginLeft: 20}}> */}\n                        <div className=\"register-item\">\n                        <form className={classes.root} noValidate autoComplete=\"off\">\n                          <div style={{ float: \"left\"}} >                            \n                            <TextField id=\"standard-basic\" label=\"email\"  \n                              className={classes.textField}                           \n                              // defaultValue=\"email\"\n                              value={user_email}\n                              onChange={({ target: { value } }) => setEmail(value)}  />   \n                              <Button variant=\"outlined\" onClick={overlap} > 검사 </Button>                         \n                          </div>\n                          <div>\n                          <TextField  id=\"standard-password-input\" label=\"password\" \n                            className={classes.textField}\n                            autoComplete=\"current-password\"\n                            defaultValue=\"password\" \n                            value={user_password}\n                            onChange={({ target: { value } }) => setPW(value)}\n                            type=\"password\"  />\n                          </div>\n                          <div>\n                            <TextField id=\"standard-basic\" label=\"name\" \n                               className={classes.textField}\n                                // defaultValue=\"email\"\n                                value={user_name}\n                                onChange={({ target: { value } }) => setName(value)}  />\n                          </div>\n                          <div className={classes.container} noValidate>\n                            <TextField    id=\"date\"  label=\"Birthday\"  type=\"date\"  defaultValue=\"2020-01-01\"\n                              className={classes.textField}\n                              InputLabelProps={{\n                                shrink: true,\n                              }}\n                              value={user_birthday}\n                              onChange={({ target: { value } }) => setBIRTH(value)}   />\n                          </div>\n                          <div style={{ marginTop: 15}}>\n                              <Button variant=\"outlined\" onClick={SignOnclick} >submit</Button> </div> \n                          <div style={{ textAlign: \"left\", margin: 15}}>\n                              <a href=\"javascript:void(0);\" onClick={closeModal}>Close</a>   </div>                          \n                        </form>    \n                        </div>                                     \n                      </div>                        \n                    </div>\n                </Modal>\n            </section>\n            </div>\n        </form>\n      </div>     \n    </Router>\n   </>\n  );\n}\n\nexport default LoginForm;","import React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\n\nfunction LogoutButton({ logout, history }) {\n  const handleClick = () => {\n    logout();\n    history.push('/');\n  }\n  return <div style={{ float: \"right\", marginRight: 5, fontSize: 15}}><Link onClick={handleClick} >Logout</Link></div>;\n}\n\nexport default withRouter(LogoutButton);","import React, { Component } from 'react';\nimport '../css/Home.css'; \nimport Popup from \"reactjs-popup\";\n//import { ButtonToolbar, Button, Form, Modal  } from 'react-bootstrap';\n//import { textAlign } from '@material-ui/system';\nimport axios from 'axios';\n\n// test용 리스트 \nconst list = [\n  {  'num': 1,  'problem': 'test 문제1',  'answer': 'test 답1'  },\n  {\n  'num': 2,\n  'problem': 'test 문제2',\n  'answer': 'test 답2'\n  },\n  {\n  'num': 3,\n  'problem': 'test 문제3',\n  'answer': 'test 답3'\n  }\n]\n\nconst Problem_Info = props => ( \n  <tr>\n    <td>{props.problem.problem_info}</td>\n  </tr>  \n)\nconst Problem_Answer = props => ( \n  <tr>\n    <td>{props.problem.problem_answer}</td>\n  </tr>  \n)\n\nconst btnStyle = {\n  color: \"white\",\n  background: \"black\",\n  padding: \".375rem .75rem\",\n  border: \"1px solid white\",\n  borderRadius: \".25rem\",\n  fontSize: \"1rem\",\n  lineHeight: 1.5,\n  textAlign:\"center\",\n  marginTop: 25\n};\n\nclass Home extends Component {\n\n  // 상태(state)는 컴포넌트의 상태를 나타냄. 변화할 수 있는 데이터의 집합\n  state = {\n    number: 0\n  }\n  //list에서 무엇을 가져올지 지정해준 후 객체를 넘겨준다. this.setState사용\n  searchList(questionList, randNum){\n    console.log(questionList[randNum-1]['problem']);\n    const index = questionList[randNum-1]['num'];\n    const problem = questionList[randNum-1]['problem'];\n    const answer = questionList[randNum-1]['answer'];\n    this.setState({ result_problem: problem, result_answer: answer, result_index: index });\n  }\n  //프로퍼티(props) 외부에서 컴포넌트와 소통하는 창구 역할. 일반적으로 프로퍼티의 값은 부모 요소에서 설정. \n  //또한 한 번 설정된 프로퍼티는 기본적으로 컴포넌트 내부에서 변경 X, 프로퍼티는 초깃값 설정과 자료형 유효성 검사 등을 사용할 수 있음\n  constructor(props) {\n    super(props);\n    this.state = {problems: [], showPopup: false, random: 0};\n    this.onChangeClick = this.onChangeClick.bind(this);\n    // // 초기 값 설정 가능\n    // this.state = { showPopup: false, random: 1 }; \n  }\n  componentDidMount() {\n    axios.get('http://hyunsojung-dev.github.io/react_hsj/view/')\n        .then(response => {\n            this.setState({ problems: response.data });\n        })\n        .catch(function (error){\n            console.log(error);\n          })\n  }\n\n  onView_ProblemInfo(){\n    var data = this.state.problems;\n    return data.map(function(currentTodo, i){\n      return <Problem_Info problem={currentTodo} key={i}/> ;\n    })\n  }\n  onView_ProblemAnswer(){\n    var data = this.state.problems;\n    return data.map(function(currentTodo, i){\n      return <Problem_Answer problem={currentTodo} key={i}/> ;\n    })\n  }\n  \n  onChangeClick() {\n    const min = 1;\n    const max = 117;\n    const rand = Math.floor(Math.random()*(max+1-min))+min;\n    console.log(rand);\n    this.setState({ random: rand });\n    // this.searchList(list, rand);\n    // this.searchProblemList(this.state.problems[rand-1]['problem_index'], rand)\n    //this.NumberList(problems, rand);\n  }\n  render() {\n    return (       \n        <div  style={{marginTop: 30 }}>\n          <div style={{textAlign: \"center\", width: \"70%\", margin: \"auto\" }}>  \n            { this.onView_ProblemInfo()[this.state.random] }  \n            <div className=\"button-style\">\n            <button style={btnStyle} onClick={this.onChangeClick.bind(this) } >NEXT</button>\n            <Popup modal trigger={<button style={btnStyle} >ANSWER</button>} >\n              <div style={{ marginTop: 15, textAlign:\"center\", fontSize: \"1rem\"}}>ANSWER</div>\n              <div style={{ margin: 30, textAlign:\"center\", fontSize: \"1rem\"}} >{ this.onView_ProblemAnswer()[this.state.random] } </div>\n            </Popup>\n           </div>              \n        </div>       \n        </div>\n    );\n  }\n}\nexport default Home;\n","import React, { useState, useEffect } from 'react';\n// react version 4 이기 때문에 react-router가 아니라 react-router-dom을 사용해야함 (버전마다 상이하게 다름)\n// 리액트 v3 정적라우팅 , v4 동적 라우팅\nimport { Link, Route, Switch, BrowserRouter as Router } from 'react-router-dom';\n\nimport { signIn } from './loginComponents/auth';\nimport AuthRoute from './loginComponents/AuthRoute';\nimport LoginForm from './loginComponents/LoginForm';\nimport LogoutButton from './loginComponents/logoutForm';\n//import Problem from './component/containers/Problem';\nimport Homeview from './containers/First-Home';\n//import YearComment from './component/containers/evaluation'\n// list_item 설정\n//import { secondaryListItems } from './component/List_Item';\n// @material-ui 설정\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\n// import Grid from '@material-ui/core/Grid';\n// import Paper from '@material-ui/core/Paper';\nimport Link2 from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\n// import NotificationsIcon from '@material-ui/icons/Notifications';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AnnouncementRoundedIcon from '@material-ui/icons/AnnouncementRounded';\nimport CreateRoundedIcon from '@material-ui/icons/CreateRounded';\nimport ImportContactsRoundedIcon from '@material-ui/icons/ImportContactsRounded';\n\n// 대쉬보드 메인 색 변경\n// import green from '@material-ui/core/colors/green';\n// const green_primary = green[800];\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nconst bluegrey_primary = blueGrey[900];\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link2 color=\"inherit\" href=\"https://hyunsojung-dev.github.io/react-certificate/\">\n        정보처리기사\n      </Link2>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n//const drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n  AppBar: {\n    background: bluegrey_primary,\n  },\n  Box: {\n    marginBottom: 10,\n  },\n}));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  // user \n  const [user, setUser] = useState(null);\n  const authenticated = user != null;\n  const login = ({ email, name }) => setUser(signIn({ email, name }));\n  const logout = () => setUser(null);\n  // drawer 기능\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    setState({ ...state, [side]: open });\n  };\n  const sideList = side => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(side, false)}\n      onKeyDown={toggleDrawer(side, false)}\n    >\n      <Divider />\n          <div>\n              <Link to=\"/\" >\n              <ListItem button>\n                <ListItemIcon>\n                  <AnnouncementRoundedIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"문제 풀기\" /> \n              </ListItem> \n              </Link>    \n              <Link to=\"/Problem\" >\n              <ListItem button>\n                <ListItemIcon>\n                  <CreateRoundedIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"문제 요청\" />\n              </ListItem>\n              </Link>\n              <Link to=\"/comment\" >\n              <ListItem button>\n                <ListItemIcon>\n                  <ImportContactsRoundedIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"년도별 리스트\" />\n              </ListItem>\n              </Link> \n          </div>\n        <Divider />\n    </div>\n  );\n \n  return (\n    <Router>\n    <div className={classes.root}>\n      <AppBar position=\"static\" className={classes.AppBar}>\n        <Toolbar >\n        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer('left', true)} >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            React Certificate\n          </Typography>\n          <div style={{ float: \"right\", marginRight: 5}}>{authenticated ? (\n                <LogoutButton logout={logout} />              \n                ) : (\n                <Link to=\"/login\">\n                    <div style={{fontSize: 16}}>Login</div>\n                </Link>\n                )}</div>\n          {/* <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton> */}\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        open={state.left} onClose={toggleDrawer('left', false)}\n      >\n        {sideList('left')}\n        {/* <List>{secondaryListItems}</List> */}\n      </Drawer>\n      <main >\n        <div />\n        {/* <Container maxWidth=\"lg\" className={classes.container}> */}\n         <Switch>\n            <Route exact path=\"/\" component={Homeview}/>\n            {/* <Route\n              path=\"/login\"\n              render={props => (\n              <LoginForm authenticated={authenticated} login={login} {...props} />\n              )} />\n            <AuthRoute\n              authenticated={authenticated}\n              path=\"/Problem\"\n              render={props => <Problem user={user} {...props} /> }  />           \n            <AuthRoute\n              authenticated={authenticated}\n              path=\"/comment\"\n              render={props => <YearComment user={user} {...props} />} />                */}\n         </Switch>\n          <Box pt={6}>\n            <Copyright />\n          </Box>\n        {/* </Container>  */}\n      </main>\n    </div>\n    </Router>\n   \n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport Dash from './Dash';\nimport { Link, Route, BrowserRouter as Router } from 'react-router-dom'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    // <App />, \n    <Dash/>,\n    <Router>\n        <Route exact path=\"/\" component={Dash} />  \n        {/* <Route path=\"/Problem\" component={Problem} />\n        <Route path=\"/login\" component={evaluation}/> */}\n    </Router>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}